// This file is part of www.nand2tetris.org
// and the book "The Elements of Computing Systems"
// by Nisan and Schocken, MIT Press.
// File name: projects/12/Memory.jack

/**
 * This library provides two services: direct access to the computer's main
 * memory (RAM), and allocation and recycling of memory blocks. The Hack RAM
 * consists of 32,768 words, each holding a 16-bit binary number.
 */ 
class Memory {
    static Array ram;
    static Array heap;

    /** Initializes the class. */
    function void init() {
        let ram = 0;
        let heap = 2048;
        let heap[0] = 2050;
        let heap[1] = 0;
        let heap[2] = 0;
        let heap[3] = 14332;
        return;
    }

    /** Returns the RAM value at the given address. */
    function int peek(int address) {
        return ram[address];
    }

    /** Sets the RAM value at the given address to the given value. */
    function void poke(int address, int value) {
        let ram[address] = value;
        return;
    }

    /** Finds an available RAM block of the given size and returns
     *  a reference to its base address. */
    function int alloc(int size) {
        var int block, prevBlock, newBlock, blockSize;
        if (~(size > 0)) {
            do Sys.halt();
        }
        let block = heap;
        let blockSize = 0;
        while (blockSize < size) {
            let prevBlock = block;
            let block = ram[block];
            let blockSize = ram[block + 1];
        }
        if (blockSize < (size + 8)) {
            let ram[prevBlock] = ram[block];
        } else {
            let newBlock = block + size + 2;
            let ram[prevBlock] = newBlock;
            let ram[newBlock] = ram[block];
            let ram[newBlock + 1] = blockSize - (size + 2);
        }
        return block + 2;
    }

    /** De-allocates the given object (cast as an array) by making
     *  it available for future allocations. */
    function void deAlloc(int addr) {
        var int block;
        let block = addr - 2;
        let ram[block] = heap[0];
        let heap[0] = block;
        return;
    }    
}
